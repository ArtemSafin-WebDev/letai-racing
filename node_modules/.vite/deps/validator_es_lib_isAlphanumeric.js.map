{
  "version": 3,
  "sources": ["../../validator/es/lib/isAlphanumeric.js"],
  "sourcesContent": ["import assertString from './util/assertString';\nimport { alphanumeric } from './alpha';\nexport default function isAlphanumeric(_str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  assertString(_str);\n  var str = _str;\n  var ignore = options.ignore;\n\n  if (ignore) {\n    if (ignore instanceof RegExp) {\n      str = str.replace(ignore, '');\n    } else if (typeof ignore === 'string') {\n      str = str.replace(new RegExp(\"[\".concat(ignore.replace(/[-[\\]{}()*+?.,\\\\^$|#\\\\s]/g, '\\\\$&'), \"]\"), 'g'), ''); // escape regex for ignore\n    } else {\n      throw new Error('ignore should be instance of a String or RegExp');\n    }\n  }\n\n  if (locale in alphanumeric) {\n    return alphanumeric[locale].test(str);\n  }\n\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nexport var locales = Object.keys(alphanumeric);"],
  "mappings": ";;;;;;;AAEe,SAAR,eAAgC,MAAM;AAC3C,MAAI,SAAS,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI;AACjF,MAAI,UAAU,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI,CAAC;AACnF,eAAa,IAAI;AACjB,MAAI,MAAM;AACV,MAAI,SAAS,QAAQ;AAErB,MAAI,QAAQ;AACV,QAAI,kBAAkB,QAAQ;AAC5B,YAAM,IAAI,QAAQ,QAAQ,EAAE;AAAA,IAC9B,WAAW,OAAO,WAAW,UAAU;AACrC,YAAM,IAAI,QAAQ,IAAI,OAAO,IAAI,OAAO,OAAO,QAAQ,6BAA6B,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AAAA,IAC7G,OAAO;AACL,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAAA,EACF;AAEA,MAAI,UAAU,cAAc;AAC1B,WAAO,aAAa,MAAM,EAAE,KAAK,GAAG;AAAA,EACtC;AAEA,QAAM,IAAI,MAAM,mBAAmB,OAAO,QAAQ,GAAG,CAAC;AACxD;AACO,IAAI,UAAU,OAAO,KAAK,YAAY;",
  "names": []
}
